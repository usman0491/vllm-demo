# Make sure to increase resource requests and limits before using this example in production.
# For examples with more realistic resource configuration, see
# ray-cluster.complete.large.yaml and
# ray-cluster.autoscaler.large.yaml.
apiVersion: ray.io/v1
kind: RayService
metadata:
  name: vllm-rayservice-demo
  namespace: ray-system
spec:
  # serveConfigV2 takes a yaml multi-line scalar, which should be a Ray Serve multi-application config. See https://docs.ray.io/en/latest/serve/multi-app.html.
  serveConfigV2: |
    applications:
      - name: nginx_service
        import_path: nginx-deploy.deployment_graph
        route_prefix: /nginx
        runtime_env:
          env_vars:
            RAY_SERVE_LOGGING_LEVEL: DEBUG
          working_dir: "https://github.com/usman0491/vllm-demo/raw/refs/heads/main/nginx-deploy.zip"
        deployments:
          - name: RootRouter
            num_replicas: 1
            max_replicas_per_node: 1
            ray_actor_options:
                num_gpus: 0
                num_cpus: 1
  rayClusterConfig:
    rayVersion: '2.9.0' # should match the Ray version in the image of the containers
    ######################headGroupSpecs#################################
    # Ray head pod template.
    headGroupSpec:
      # The `rayStartParams` are used to configure the `ray start` command.
      # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
      # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
      rayStartParams:
        dashboard-host: '0.0.0.0'
      #pod template
      template:
        spec:
          containers:
            - name: ray-head
              image: rayproject/ray:2.9.0
              resources:
                limits:
                  cpu: 2
                  memory: 4Gi
                requests:
                  cpu: 1
                  memory: 2Gi
              ports:
                - containerPort: 6379
                  name: gcs-server
                - containerPort: 8265 # Ray dashboard
                  name: dashboard
                - containerPort: 10001
                  name: client
                - containerPort: 8000
                  name: serve
    workerGroupSpecs:
      # the pod replicas in this group typed worker
      - replicas: 1
        minReplicas: 1
        maxReplicas: 1
        # logical group name, for this called small-group, also can be functional
        groupName: vllm-workers
        # The `rayStartParams` are used to configure the `ray start` command.
        # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
        # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
        rayStartParams: {}
        #pod template
        template:
          spec:
            containers:
              - name: ray-worker # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
                image: rayproject/ray:2.9.0
                lifecycle:
                  preStop:
                    exec:
                      command: ["/bin/sh","-c","ray stop"]
                resources:
                  limits:
                    cpu: "2"
                    memory: "4Gi"
                  requests:
                    cpu: "1"
                    memory: "2Gi"
            #   - name: vllm-container
            #     image: vllm/vllm-openai:latest
            #     imagePullPolicy: Always
            #     args:
            #       - '--model'
            #       - 'meta-llama/Llama-3.1-8B-Instruct'
            #       - '--gpu-memory-utilization'
            #       - '0.95'
            #       - '--enforce-eager'
            #     env: 
            #       - name: HUGGING_FACE_HUB_TOKEN
            #         valueFrom:
            #           secretKeyRef:
            #             name: vllm-huggingface-token
            #             key: HUGGINGFACE_TOKEN
            #       - name: VLLM_API_KEY
            #         valueFrom:
            #           secretKeyRef:
            #             name: vllm-api-key
            #             key: VLLM_API_KEY
            #     resources:
            #       limits:
            #         nvidia.com/gpu: "1"
            #     ports:
            #       - containerPort: 5432
            #         protocol: TCP
                # readinessProbe:
                #   httpGet:
                #     path: /health
                #     port: 8000
                #   initialDelaySeconds: 1000  # Set a long delay
                #   periodSeconds: 1000      # Set a long interval
                #   failureThreshold: 1000     # Set high threshold