apiVersion: ray.io/v1
kind: RayService
metadata:
  name: vllm-demo-service
  namespace: ray-system
spec:
  # serveConfigV2 takes a yaml multi-line scalar, which should be a Ray Serve multi-application config. See https://docs.ray.io/en/latest/serve/multi-app.html.
  # working_dir: "https://github.com/usman0491/vllm-demo/raw/refs/heads/main/vllm-deploy-2.zip"
  # working_dir: "https://github.com/EmumbaOrg/emumba-llm/raw/refs/heads/main/kuberay/vllm-deployment.zip"
  # working_dir: "https://github.com/usman0491/vllm-demo/raw/refs/heads/main/vllm-deployment.zip"
  # working_dir: "https://github.com/usman0491/vllm-demo/raw/refs/heads/main/vllm-scaling-deployment.zip"
  # working_dir: "https://github.com/usman0491/vllm-demo/raw/refs/heads/main/vllm-two-deployments.zip"
  # working_dir: "https://github.com/usman0491/vllm-demo/raw/refs/heads/main/vllm-minimal-two-deployments.zip"


  serveConfigV2: |
    applications:
    - name: vllm_service
      import_path: vllm-minimal-two-deployments:model
      deployments:
      - name: VLLMDeployment
        num_replicas: 1
        # ray_actor_options:
        #   num_cpus: 1
      route_prefix: /
      runtime_env:
        env_vars:
          RAY_LOG_TO_STDERR: "1"
          RAY_SERVE_LOGGING_LEVEL: DEBUG
          HUGGING_FACE_HUB_TOKEN: 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
          MODEL_ID: "meta-llama/Meta-Llama-3-8B-Instruct"
          TENSOR_PARALLELISM: "1"
          PIPELINE_PARALLELISM: "1"
        working_dir: "https://github.com/usman0491/vllm-demo/raw/refs/heads/main/vllm-minimal-two-deployments.zip"
        pip: ["vllm==0.5.4", "typer==0.12.3", "rich==13.3.3", "jinja2>=3.1.0"]
        
# deployments:
# - name: VLLMDeployment
# num_replicas: 1
# max_replicas_per_node: 1
# ray_actor_options:
#     resources:
#     head_node: 0

  rayClusterConfig:
    rayVersion: '2.9.0' # should match the Ray version in the image of the containers
    ######################headGroupSpecs#################################
    enableInTreeAutoscaling: true
    autoscalerOptions:
      upscalingMode: Default
      idleTimeoutSeconds: 60
      
    # Ray head pod template.
    headGroupSpec:
      # The `rayStartParams` are used to configure the `ray start` command.
      # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
      # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
    #   serviceType: NodePort
      rayStartParams:
        dashboard-host: '0.0.0.0'
        # node-ip-address: '0.0.0.0'
        num-cpus: "1"
      #pod template
      template:
        spec:
          nodeSelector:
            head: "true"
          containers:
            - name: ray-head
              image: rayproject/ray-ml:2.9.0-py310
              resources:
                limits:
                  cpu: 2
                  memory: 8Gi
                requests:
                  cpu: 2
                  memory: 8Gi
              ports:
                - containerPort: 6379
                  name: gcs-server
                - containerPort: 8265 # Ray dashboard
                  name: dashboard
                - containerPort: 10001
                  name: client
                - containerPort: 8000
                  name: serve
              env:
                - name: HUGGING_FACE_HUB_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: hf-secret
                      key: hf_api_token
    workerGroupSpecs:
      # the pod replicas in this group typed worker
      - replicas: 0
        minReplicas: 0
        maxReplicas: 2
        # logical group name, for this called small-group, also can be functional
        groupName: vllm-group
        # The `rayStartParams` are used to configure the `ray start` command.
        # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
        # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
        rayStartParams: {}
        #   resources: '{"worker": 1}'
        #pod template
        template:
          spec:
            nodeSelector:
              worker: "true"
            containers:
              - name: ray-worker # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
                image: rayproject/ray-ml:2.9.0-py310
                env:
                  - name: HUGGING_FACE_HUB_TOKEN
                    valueFrom:
                      secretKeyRef:
                        name: hf-secret
                        key: hf_api_token
                lifecycle:
                  preStop:
                    exec:
                      command: ["/bin/sh","-c","ray stop"]
                resources:
                  limits:
                    cpu: "2"
                    memory: "20Gi"
                    nvidia.com/gpu: "1"
                  requests:
                    cpu: "2"
                    memory: "20Gi"
                    nvidia.com/gpu: "1"
            tolerations:
              - key: nvidia.com/gpu
                operator: Exists
                effect: NoSchedule